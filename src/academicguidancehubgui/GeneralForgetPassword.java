/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package academicguidancehubgui;

import academicguidancehub.User;
import academicguidancehub.ReadOperations;
import academicguidancehub.FileLocationInterface;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class GeneralForgetPassword extends javax.swing.JFrame {

    private ArrayList<User> userList;
    
    public GeneralForgetPassword() {
        initComponents();
        setSize(500,500);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        userID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        newPw = new javax.swing.JTextField();
        resetBt = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/ForgetPassword.png"))); // NOI18N
        jLabel2.setText("ForgetPassword.png");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 115));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 26)); // NOI18N
        jLabel3.setText("Reset Password");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 190, 10));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel4.setText("User ID:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, -1, -1));
        getContentPane().add(userID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 180, 40));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jLabel5.setText("New Password:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, -1, -1));
        getContentPane().add(newPw, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, 180, 40));

        resetBt.setBackground(new java.awt.Color(255, 51, 51));
        resetBt.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        resetBt.setForeground(new java.awt.Color(255, 255, 255));
        resetBt.setText("Reset");
        resetBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetBtMouseClicked(evt);
            }
        });
        getContentPane().add(resetBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, 110, 40));

        cancel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cancel.setText("Cancel");
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelMouseClicked(evt);
            }
        });
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        getContentPane().add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 393, 100, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelMouseClicked
        dispose();
        GeneralLoginPage obj = new GeneralLoginPage();
        obj.setVisible(true);
    }//GEN-LAST:event_cancelMouseClicked

    private void resetBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetBtMouseClicked
        String enteredID = userID.getText();
        String enteredPassword = newPw.getText();
        
        User user = findUserByID(enteredID);
        
        if (user != null) {
            if (enteredID.startsWith("ST")) {
                ArrayList<String> studentIDs = new ArrayList();
                String rec;
                BufferedReader br;
                try {
                    br = new BufferedReader(new FileReader(FileLocationInterface.studentFilePath));
                    while ((rec = br.readLine()) != null) {
                        String[] record = rec.strip().split(";");
                        System.out.println("" + record[0]);
                        studentIDs.add(record[0]);
                    }

                } catch (Exception ex) {
                    Logger.getLogger(GeneralForgetPassword.class.getName()).log(Level.SEVERE, null, ex);
                }


                for(int i = 0; i< studentIDs.size(); i++){
                    if(enteredID.equals(studentIDs.get(i))){
                        UpdatePasswordStudent(enteredID, enteredPassword);
                        break;
                    }
                }  
                
                //Message 
                JOptionPane.showMessageDialog(null, "Password reset successfully!", "PASSWORD RESET SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                GeneralLoginPage obj = new GeneralLoginPage();
                obj.setVisible(true);

            } else if (enteredID.startsWith("LC")) {
                ArrayList<String> staffIDs = new ArrayList();
                String rec;
                BufferedReader br;
                try {
                    br = new BufferedReader(new FileReader(FileLocationInterface.lecturerFilePath));
                    while ((rec = br.readLine()) != null) {
                        String[] record = rec.strip().split(";");
                        System.out.println("" + record[0]);
                        staffIDs.add(record[0]);
                    }

                } catch (Exception ex) {
                    Logger.getLogger(GeneralForgetPassword.class.getName()).log(Level.SEVERE, null, ex);
                }


                for(int i = 0; i< staffIDs.size(); i++){
                    if(enteredID.equals(staffIDs.get(i))){
                        UpdatePasswordLecturer(enteredID, enteredPassword);
                        break;
                    } else{
                        //Project Manager Part
                        ArrayList<String> pmIDs = new ArrayList();
                        String recc;
                        BufferedReader brr;
                        try {
                            brr = new BufferedReader(new FileReader(FileLocationInterface.projectManagerPath));
                            while ((recc = brr.readLine()) != null) {
                                String[] record = recc.strip().split(";");
                                System.out.println("" + record[0]);
                                pmIDs.add(record[0]);
                            }
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(GeneralForgetPassword.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(GeneralForgetPassword.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        for(int ii = 0; ii< pmIDs.size(); ii++){
                            if(enteredID.equals(pmIDs.get(ii))){
                                UpdatePasswordProjectManager(enteredID, enteredPassword);
                                break;
                            }
                        }
                        JOptionPane.showMessageDialog(null, "Password reset successfully!", "PASSWORD RESET SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                        GeneralLoginPage obj = new GeneralLoginPage();
                        obj.setVisible(true);
                    }
                }  
                //Message
                JOptionPane.showMessageDialog(null, "Password reset successfully!", "PASSWORD RESET SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                GeneralLoginPage obj = new GeneralLoginPage();
                obj.setVisible(true);
            } else if (enteredID.startsWith("AD")) {
                ArrayList<String> adminIDs = new ArrayList();
                String rec;
                BufferedReader br;
                try {
                    br = new BufferedReader(new FileReader(FileLocationInterface.adminFilePath));
                    while ((rec = br.readLine()) != null) {
                        String[] record = rec.strip().split(";");
                        System.out.println("" + record[0]);
                        adminIDs.add(record[0]);
                    }

                } catch (Exception ex) {
                    Logger.getLogger(GeneralForgetPassword.class.getName()).log(Level.SEVERE, null, ex);
                }


                for(int i = 0; i< adminIDs.size(); i++){
                    if(enteredID.equals(adminIDs.get(i))){
                        UpdatePasswordAdmin(enteredID, enteredPassword);
                        break;
                    }
                }  
                //Message
                JOptionPane.showMessageDialog(null, "Password reset successfully!", "PASSWORD RESET SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                GeneralLoginPage obj = new GeneralLoginPage();
                obj.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "User not found", "Login Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_resetBtMouseClicked

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.dispose();
        GeneralLoginPage bj = new GeneralLoginPage();
        bj.setVisible(true);
    }//GEN-LAST:event_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneralForgetPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneralForgetPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneralForgetPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneralForgetPassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeneralForgetPassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField newPw;
    private javax.swing.JButton resetBt;
    private javax.swing.JTextField userID;
    // End of variables declaration//GEN-END:variables

    private User findUserByID(String enteredID) {
        ReadOperations reader = new ReadOperations();
        if (enteredID.startsWith("ST")) {
            userList = reader.readUserData(FileLocationInterface.studentFilePath);
            System.out.println("User List Size: " + userList.size()); // Debugging
            for (User user : userList) {
                System.out.println("User ID: " + user.getUserId()); // Debugging
                if (user.getUserId().equals(enteredID)) {
                    System.out.println("User Found!"); // Debugging
                    return user;
                }
            }
        } else if (enteredID.startsWith("LC")) {
            userList = reader.readUserData(FileLocationInterface.lecturerFilePath);
            System.out.println("User List Size: " + userList.size()); // Debugging
            for (User user : userList) {
                System.out.println("User ID: " + user.getUserId()); // Debugging
                if (user.getUserId().equals(enteredID)) {
                    System.out.println("User Found!"); // Debugging
                    return user;
                } else{
                    userList = reader.readUserData(FileLocationInterface.projectManagerPath);
                    System.out.println("User List Size: " + userList.size()); // Debugging
                    for (User pm : userList) {
                        System.out.println("User ID: " + pm.getUserId()); // Debugging
                        if (pm.getUserId().equals(enteredID)) {
                            System.out.println("User Found!"); // Debugging
                            return pm;
                        }
                    }
                }
            }
        } else if (enteredID.startsWith("AD")) {
            userList = reader.readUserData(FileLocationInterface.adminFilePath);
            System.out.println("User List Size: " + userList.size()); // Debugging
            for (User user : userList) {
                System.out.println("User ID: " + user.getUserId()); // Debugging
                if (user.getUserId().equals(enteredID)) {
                    System.out.println("User Found!"); // Debugging
                    return user;
                }
            }
        }
        
        System.out.println("User Not Found!"); // Debugging
        return null;
    }

    private void UpdatePasswordStudent(String enteredID, String enteredPassword) {
        try (BufferedReader buffer = new BufferedReader(new FileReader(FileLocationInterface.studentFilePath))) {
            String currentLine;
            ArrayList<String> updatedLines = new ArrayList<>();

            // Read and update lines
            while ((currentLine = buffer.readLine()) != null) {
                String[] data = currentLine.split(";");
                if (data.length >= 2 && enteredID.equals(data[0].trim())) {
                    data[2] = enteredPassword;
                }
                updatedLines.add(String.join(";", data));
            }

            // Write the updated data back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FileLocationInterface.studentFilePath))) {
                for (String updatedLine : updatedLines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void UpdatePasswordLecturer(String enteredID, String enteredPassword) {
        try (BufferedReader buffer = new BufferedReader(new FileReader(FileLocationInterface.lecturerFilePath))) {
            String currentLine;
            ArrayList<String> updatedLines = new ArrayList<>();

            // Read and update lines
            while ((currentLine = buffer.readLine()) != null) {
                String[] data = currentLine.split(";");
                if (data.length >= 2 && enteredID.equals(data[0].trim())) {
                    // Found the user, update the password
                    data[2] = enteredPassword;
                }
                updatedLines.add(String.join(";", data));
            }

            // Write the updated data back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FileLocationInterface.lecturerFilePath))) {
                for (String updatedLine : updatedLines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void UpdatePasswordAdmin(String enteredID, String enteredPassword) {
        try (BufferedReader buffer = new BufferedReader(new FileReader(FileLocationInterface.adminFilePath))) {
            String currentLine;
            ArrayList<String> updatedLines = new ArrayList<>();

            // Read and update lines
            while ((currentLine = buffer.readLine()) != null) {
                String[] data = currentLine.split(";");
                if (data.length >= 2 && enteredID.equals(data[0].trim())) {
                    // Found the user, update the password
                    data[2] = enteredPassword;
                }
                updatedLines.add(String.join(";", data));
            }

            // Write the updated data back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FileLocationInterface.adminFilePath))) {
                for (String updatedLine : updatedLines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void UpdatePasswordProjectManager(String enteredID, String enteredPassword) {
        try (BufferedReader buffer = new BufferedReader(new FileReader(FileLocationInterface.projectManagerPath))) {
            String currentLine;
            ArrayList<String> updatedLines = new ArrayList<>();

            // Read and update lines
            while ((currentLine = buffer.readLine()) != null) {
                String[] data = currentLine.split(";");
                if (data.length >= 2 && enteredID.equals(data[0].trim())) {
                    // Found the user, update the password
                    data[2] = enteredPassword;
                }
                updatedLines.add(String.join(";", data));
            }

            // Write the updated data back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FileLocationInterface.projectManagerPath))) {
                for (String updatedLine : updatedLines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
