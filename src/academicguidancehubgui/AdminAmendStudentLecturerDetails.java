/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package academicguidancehubgui;

import academicguidancehub.FileReaderUtils;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.Line;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author New HP
 */
public class AdminAmendStudentLecturerDetails extends javax.swing.JFrame {

    /**
     * Creates new form AmendStudentLecturerDetails
     */
    public AdminAmendStudentLecturerDetails() {
        initComponents();
        setSize(1000,630);
        setResizable(false);
        editStudentBt.setVisible(false);
        editLecturerBt.setVisible(false);
        studentIntake.setVisible(false);
        intakeCb.setVisible(false);
        searchLabel.setVisible(false);
        searchTf.setVisible(false);
        
        ArrayList<String[]> intakesdataList = new ArrayList<>();
        
        // Add "All" option
        String[] allOption = {"All"};
        intakeCb.addItem("All");
        
        // Read items from the text file and populate combo box
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/intakesType.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] values = line.split(";");
                intakeCb.addItem(values[0]);
                intakesdataList.add(values);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        roleCb = new javax.swing.JComboBox<>();
        searchLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTb = new javax.swing.JTable();
        backBt = new javax.swing.JButton();
        removeBt = new javax.swing.JButton();
        editLecturerBt = new javax.swing.JButton();
        studentIntake = new javax.swing.JLabel();
        intakeCb = new javax.swing.JComboBox<>();
        editStudentBt = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        searchTf = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 26)); // NOI18N
        jLabel1.setText("Amend Student/Lecturer Details Page");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addComponent(jLabel1)
                .addContainerGap(290, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(32, 32, 32))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, -1));

        roleCb.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        roleCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<null>", "Student", "Lecturer" }));
        roleCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roleCbItemStateChanged(evt);
            }
        });
        roleCb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roleCbMouseClicked(evt);
            }
        });
        getContentPane().add(roleCb, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 170, 30));

        searchLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchLabel.setText("Search:");
        getContentPane().add(searchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, -1, -1));

        infoTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        infoTb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoTbMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(infoTb);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, 750, 260));

        backBt.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        backBt.setForeground(new java.awt.Color(255, 51, 51));
        backBt.setText("Back");
        backBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtMouseClicked(evt);
            }
        });
        getContentPane().add(backBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 540, 90, 30));

        removeBt.setBackground(new java.awt.Color(102, 102, 0));
        removeBt.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        removeBt.setForeground(new java.awt.Color(255, 255, 102));
        removeBt.setText("Remove");
        removeBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeBtMouseClicked(evt);
            }
        });
        getContentPane().add(removeBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 540, 100, 30));

        editLecturerBt.setBackground(new java.awt.Color(153, 153, 0));
        editLecturerBt.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        editLecturerBt.setForeground(new java.awt.Color(255, 255, 204));
        editLecturerBt.setText("Edit");
        editLecturerBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editLecturerBtMouseClicked(evt);
            }
        });
        getContentPane().add(editLecturerBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 540, 100, 30));

        studentIntake.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        studentIntake.setText("Student Intake:");
        getContentPane().add(studentIntake, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, -1, -1));

        intakeCb.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        intakeCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                intakeCbItemStateChanged(evt);
            }
        });
        getContentPane().add(intakeCb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 200, 30));

        editStudentBt.setBackground(new java.awt.Color(255, 255, 204));
        editStudentBt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editStudentBt.setText("Edit");
        editStudentBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editStudentBtMouseClicked(evt);
            }
        });
        getContentPane().add(editStudentBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 540, 100, 30));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/edit_backgrnd.png"))); // NOI18N
        jLabel7.setText("edit_backgrnd.png");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, 550));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/edit2_bckgrd.png"))); // NOI18N
        jLabel3.setText("edit2_bckgrd.png");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 100, -1, 620));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Search Role:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, -1, -1));

        searchTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTf.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchTfCaretUpdate(evt);
            }
        });
        getContentPane().add(searchTf, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 202, 270, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtMouseClicked
        this.dispose();
        AdminDashboard obj = new AdminDashboard();
        obj.setVisible(true);
    }//GEN-LAST:event_backBtMouseClicked

    private void editStudentBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editStudentBtMouseClicked
        DefaultTableModel stList = (DefaultTableModel)infoTb.getModel();
        int selectedRow = infoTb.getSelectedRow();
        
        if (selectedRow != -1 && selectedRow < stList.getRowCount()) {
            int columnCount = stList.getColumnCount();
            if (columnCount >= 5) { // Check if there are at least 7 columns
                String id = stList.getValueAt(selectedRow, 0).toString();
                String name = stList.getValueAt(selectedRow, 1).toString();
                String password = stList.getValueAt(selectedRow, 2).toString();
                String email = stList.getValueAt(selectedRow, 3).toString();
                String contact = stList.getValueAt(selectedRow, 4).toString();
                String intake = stList.getValueAt(selectedRow, 5).toString();

                AdminEditStudent editStudentPage = new AdminEditStudent(id, name, password, email, contact, intake);
                editStudentPage.setVisible(true);

                this.dispose();
            } else {
                System.err.println("Not enough columns in the table to retrieve intake data.");
            }
        }else {
            System.err.println("No row selected or invalid selected row index.");
        }
    }//GEN-LAST:event_editStudentBtMouseClicked

    private void roleCbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roleCbMouseClicked
        
    }//GEN-LAST:event_roleCbMouseClicked

    private void roleCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roleCbItemStateChanged
        searchLabel.setVisible(true);
        searchTf.setVisible(true);
        
        String selectedRole = roleCb.getSelectedItem().toString();
        
        if (selectedRole.equals("Student")) {
            studentIntake.setVisible(true);
            intakeCb.setVisible(true);

            searchLabel.setVisible(true);
            searchTf.setVisible(true);

            String filePathClassType = "src/textfiles/Students.txt";
            String delimiter = ";";
            int[] classTypeColumnIndices = {0, 1, 2, 3, 4, 6};
            String[][] classTypeData = FileReaderUtils.readData(filePathClassType, delimiter, classTypeColumnIndices);

            if (classTypeData != null) {
                DefaultTableModel classTypeTableModel = new DefaultTableModel();
                classTypeTableModel.addColumn("Student ID");
                classTypeTableModel.addColumn("Name");
                classTypeTableModel.addColumn("Password");
                classTypeTableModel.addColumn("Email");
                classTypeTableModel.addColumn("Contact");
                classTypeTableModel.addColumn("Intake Code");

                for (String[] row : classTypeData) {
                    classTypeTableModel.addRow(row);
                }

                infoTb.setModel(classTypeTableModel);
            }
        } else if (selectedRole.equals("Lecturer")) {
            studentIntake.setVisible(false);
            intakeCb.setVisible(false);

            searchLabel.setVisible(true);
            searchTf.setVisible(true);

            String filePathClassType = "src/textfiles/Lecturer.txt";
            String delimiter = ";";
            int[] classTypeColumnIndices = {0, 1, 2, 3, 4, 5, 6};
            String[][] classTypeData = FileReaderUtils.readData(filePathClassType, delimiter, classTypeColumnIndices);

            if (classTypeData != null) {
                DefaultTableModel classTypeTableModel = new DefaultTableModel();
                classTypeTableModel.addColumn("Lecturer ID");
                classTypeTableModel.addColumn("Name");
                classTypeTableModel.addColumn("Password");
                classTypeTableModel.addColumn("Email");
                classTypeTableModel.addColumn("Contact");
                classTypeTableModel.addColumn("Role");
                classTypeTableModel.addColumn("Functional Area(s)");

                for (String[] row : classTypeData) {
                    classTypeTableModel.addRow(row);
                }

                infoTb.setModel(classTypeTableModel);
            }
        } else if (selectedRole.equals("<null>")){
            studentIntake.setVisible(false);
            intakeCb.setVisible(false);

            searchLabel.setVisible(false);
            searchTf.setVisible(false);

            DefaultTableModel model = new DefaultTableModel();
            infoTb.setModel(model);
        }        
    }//GEN-LAST:event_roleCbItemStateChanged

    private void intakeCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_intakeCbItemStateChanged
        String selectedIntake = intakeCb.getSelectedItem().toString();
        String selectedRole = roleCb.getSelectedItem().toString();
        
        String filePathStudents = "src/textfiles/Students.txt";
        String delimiter = ";";
        int[] studentColumnIndices = {0, 1, 2, 3, 4, 6};    
        
        String[][] allStudentsData = FileReaderUtils.readData(filePathStudents, delimiter, studentColumnIndices);
        
        if (selectedRole.equals("Student")) {
            if(selectedIntake.equals("All")){
                DefaultTableModel classTypeTableModel = new DefaultTableModel();
                classTypeTableModel.addColumn("Student ID");
                classTypeTableModel.addColumn("Name");
                classTypeTableModel.addColumn("Password");
                classTypeTableModel.addColumn("Email");
                classTypeTableModel.addColumn("Contact");
                classTypeTableModel.addColumn("Intake Code");
                for (String[] row : allStudentsData) {
                    classTypeTableModel.addRow(row);
                }

                infoTb.setModel(classTypeTableModel);
            } else{
                List<String[]> filteredStudents = new ArrayList<>();
                for (String[] student : allStudentsData) {
                    System.out.println("Student Data Length: " + student.length);
                    if (student.length >= 3) {
                        String studentIntake = student[5]; 
                        System.out.println("Student Intake: " + studentIntake);

                        if (selectedIntake.equals(studentIntake)) {
                            filteredStudents.add(student);
                        }
                    } else {
                        System.out.println("Student data is incomplete.");
                    }
                }
                
                DefaultTableModel classTypeTableModel = new DefaultTableModel();
                classTypeTableModel.addColumn("Student ID");
                classTypeTableModel.addColumn("Name");
                classTypeTableModel.addColumn("Password");
                classTypeTableModel.addColumn("Email");
                classTypeTableModel.addColumn("Contact");
                classTypeTableModel.addColumn("Intake Code");

                for (String[] row : filteredStudents) {
                    classTypeTableModel.addRow(row);
                }
                infoTb.setModel(classTypeTableModel);
            }
        }
    }//GEN-LAST:event_intakeCbItemStateChanged

    private void searchTfCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchTfCaretUpdate
        String searchText = searchTf.getText().trim();
        DefaultTableModel model = new DefaultTableModel();
        infoTb.setModel(model);
        String selectedRole = roleCb.getSelectedItem().toString();
        
        if (selectedRole.equals("Student")) {
            String selectedIntake = intakeCb.getSelectedItem().toString();
            String filePathStudents = "src/textfiles/Students.txt";
            String delimiter = ";";
            int[] studentColumnIndices = {0, 1, 2, 3, 4, 6};
            String[][] allStudentsData = FileReaderUtils.readData(filePathStudents, delimiter, studentColumnIndices);
            if(!searchText.isEmpty()){
                if(selectedIntake.equals("All")){
                    studentPerformSearchAndUpdateTable(searchText, filePathStudents, studentColumnIndices);
                } else{
                    studentIntakeSearchAndUpdateTable(searchText, filePathStudents, studentColumnIndices, selectedIntake);
                }
            } else{
                roleCbItemStateChanged(null);
            }
        } else if (selectedRole.equals("Lecturer")){
            String filePath = "src/textfiles/Lecturer.txt";
            int[] columnIndices = {0, 1, 2, 3, 4, 5, 6};
            if(!searchText.isEmpty()){
                staffPerformSearchAndUpdateTable(searchText, filePath, columnIndices);
            }else{
                roleCbItemStateChanged(null);
            }
        } else {
            studentIntake.setVisible(false);
            intakeCb.setVisible(false);

            searchLabel.setVisible(false);
            searchTf.setVisible(false);

            infoTb.setModel(model);
        }
    }//GEN-LAST:event_searchTfCaretUpdate

    private void editLecturerBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editLecturerBtMouseClicked
        DefaultTableModel stList = (DefaultTableModel)infoTb.getModel();
        int selectedRow = infoTb.getSelectedRow();
        
        if (selectedRow != -1 && selectedRow < stList.getRowCount()) {
            int columnCount = stList.getColumnCount();
            if (columnCount >= 5) { // Check if there are at least 7 columns
                String id = stList.getValueAt(selectedRow, 0).toString();
                String name = stList.getValueAt(selectedRow, 1).toString();
                String password = stList.getValueAt(selectedRow, 2).toString();
                String email = stList.getValueAt(selectedRow, 3).toString();
                String contact = stList.getValueAt(selectedRow, 4).toString();
                String role = stList.getValueAt(selectedRow, 5).toString();
                String functionalField = stList.getValueAt(selectedRow, 6).toString();

                AdminEditLecturer obj = new AdminEditLecturer(id, name, password, email, contact, role, functionalField);
                obj.setVisible(true);

                this.dispose();
            } else {
                System.err.println("Not enough columns in the table to retrieve intake data.");
            }
        }else {
            System.err.println("No row selected or invalid selected row index.");
        }
    }//GEN-LAST:event_editLecturerBtMouseClicked

    private void removeBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeBtMouseClicked
        String selectedIntake = intakeCb.getSelectedItem().toString();
        String selectedRole = roleCb.getSelectedItem().toString();
        
        DefaultTableModel model = (DefaultTableModel) infoTb.getModel();
        int selectedRow = infoTb.getSelectedRow();

        if (selectedRow != -1) {
            String tp = model.getValueAt(infoTb.getSelectedRow(),0).toString();

            model.removeRow(selectedRow);
            
            if(selectedRole.equals("Student")){
                String studentfilePath = "src/textfiles/Students.txt";
                String delimiter = ";";
                UpdateTextFile(studentfilePath, tp, delimiter);
                JOptionPane.showMessageDialog(null, "Student deleted successfully!", "DELETE STUDENT SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                
            } else if (selectedRole.equals("Lecturer")){
                String lecturerfilePath = "src/textfiles/Lecturer.txt";
                String delimiter = ";";
                UpdateTextFile(lecturerfilePath, tp, delimiter);
                JOptionPane.showMessageDialog(null, "Lecturer deleted successfully!", "DELETE LECTURER SUCCESS", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeBtMouseClicked

    private void infoTbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoTbMouseClicked
        DefaultTableModel stList = (DefaultTableModel)infoTb.getModel();
        String selectedRole = roleCb.getSelectedItem().toString();
        int selectedRow = infoTb.getSelectedRow();
        
        if(selectedRole.equals("Student")){
            if(selectedRow != -1){
                editStudentBt.setVisible(true);
                editLecturerBt.setVisible(false);
            } else{
                editStudentBt.setVisible(false);
                editLecturerBt.setVisible(false);
            }
        } else if (selectedRole.equals("Lecturer")){
            if(selectedRow != -1){
                editStudentBt.setVisible(false);
                editLecturerBt.setVisible(true);
            } else{
                editStudentBt.setVisible(false);
                editLecturerBt.setVisible(false);
            }
        } else {
            editStudentBt.setVisible(false);
            editLecturerBt.setVisible(false);
        }
    }//GEN-LAST:event_infoTbMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminAmendStudentLecturerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminAmendStudentLecturerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminAmendStudentLecturerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminAmendStudentLecturerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminAmendStudentLecturerDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBt;
    private javax.swing.JButton editLecturerBt;
    private javax.swing.JButton editStudentBt;
    private javax.swing.JTable infoTb;
    private javax.swing.JComboBox<String> intakeCb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeBt;
    private javax.swing.JComboBox<String> roleCb;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTf;
    private javax.swing.JLabel studentIntake;
    // End of variables declaration//GEN-END:variables

    private void staffPerformSearchAndUpdateTable(String searchText, String filePath, int[] columnIndices) {
        DefaultTableModel model = new DefaultTableModel();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;

            model.setColumnIdentifiers(new Object[]{"Lecturer ID","Name","Password","Email","Contact","Role","Functional Area(s)"});

            while ((line = reader.readLine()) != null) {
                String[] rowData = line.split(";");

                for (int columnIndex : columnIndices) {
                    if (rowData[columnIndex].toLowerCase().contains(searchText.toLowerCase())) {
                        model.addRow(rowData);
                        break; 
                    }
                }
            }

            infoTb.setModel(model);
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }

    private void studentPerformSearchAndUpdateTable(String searchText, String filePath, int[] columnIndices) {
        DefaultTableModel model = new DefaultTableModel();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;

            model.setColumnIdentifiers(new Object[]{"Student ID","Name","Password","Email","Contact","Role", "Intake Code"});

            while ((line = reader.readLine()) != null) {
                String[] rowData = line.split(";");

                for (int columnIndex : columnIndices) {
                    if (rowData[columnIndex].toLowerCase().contains(searchText.toLowerCase())) {
                        model.addRow(rowData);
                        break; 
                    }
                }
            }
            
            infoTb.setModel(model);
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }

    private void studentIntakeSearchAndUpdateTable(String searchText, String filePath, int[] columnIndices, String selectedIntake) {
        DefaultTableModel model = new DefaultTableModel();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;

            model.setColumnIdentifiers(new Object[]{"Student ID","Name","Password","Email","Contact","Role", "Intake Code"});

            while ((line = reader.readLine()) != null) {
                String[] rowData = line.split(";");

                if (rowData.length > 6 && rowData[6].equals(selectedIntake)) {
                    for (int columnIndex : columnIndices) {
                        if (rowData[columnIndex].toLowerCase().contains(searchText.toLowerCase())) {
                            model.addRow(rowData);
                            break; 
                        }
                    }
                }
            }
            
            infoTb.setModel(model);
        } catch (IOException e) {
            e.printStackTrace(); 
        }
    }

    private void UpdateTextFile(String filePath, String tp, String delimiter) {
        try {
        // Read the content of the file and store it in a list
            File file = new File(filePath);
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            StringBuilder content = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                // Split the line by the delimiter to check if it contains the specified 'tp'
                String[] parts = line.split(delimiter);
                if (!parts[0].equals(tp)) { // If the 'tp' doesn't match, keep the line
                    content.append(line).append(System.lineSeparator());
                }
            }
            reader.close();

            // Write the updated content back to the file
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            writer.write(content.toString());
            writer.close();

            System.out.println("Entry with tp '" + tp + "' removed from the file.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
