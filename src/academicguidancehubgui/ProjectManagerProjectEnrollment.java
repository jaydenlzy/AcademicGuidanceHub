/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package academicguidancehubgui;

import academicguidancehub.ProjectManager;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Lzy
 */
public class ProjectManagerProjectEnrollment extends javax.swing.JFrame {

    /**
     * Creates new form ProjectManagerProjectEnrollment
     */
    ProjectManager pm = null;

    public ProjectManagerProjectEnrollment(ProjectManager pm) {
        this.pm = pm;
        initComponents();
        loadIntakeList();
        loadProjectCategoryList();
        loadSupervisorList();
        loadSecondMarkerList();

        cmbBoxIntake.setVisible(false);
        txtStudentId.setVisible(false);
        lblNotePresentation.setVisible(false);
        lblSuperSchool.setVisible(false);
        lblSecondSchool.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnClearAll = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rdBtnIntake = new javax.swing.JRadioButton();
        cmbBoxIntake = new javax.swing.JComboBox<>();
        rdBtnIndividual = new javax.swing.JRadioButton();
        txtStudentId = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        lblNotePresentation = new javax.swing.JLabel();
        cmbBoxPrjCategory = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbBoxSupervisor = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cmbBoxSecMarker = new javax.swing.JComboBox<>();
        lblSuperSchool = new javax.swing.JLabel();
        lblSecondSchool = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtProjectTitle = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        spinnerDueDate = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(153, 255, 255));

        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 0, 20)); // NOI18N
        jLabel1.setText("Project Manager - Project Enrollment");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));

        btnClearAll.setText("Clear All");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(btnClearAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setText("Enroll by:");

        rdBtnIntake.setBackground(new java.awt.Color(204, 255, 255));
        buttonGroup1.add(rdBtnIntake);
        rdBtnIntake.setText("Intake");
        rdBtnIntake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnIntakeActionPerformed(evt);
            }
        });

        cmbBoxIntake.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        rdBtnIndividual.setBackground(new java.awt.Color(204, 255, 255));
        buttonGroup1.add(rdBtnIndividual);
        rdBtnIndividual.setText("Individual Student");
        rdBtnIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnIndividualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdBtnIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBoxIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdBtnIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(157, 157, 157))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdBtnIntake)
                    .addComponent(rdBtnIndividual))
                .addGap(6, 6, 6)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBoxIntake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, -1));

        jPanel8.setBackground(new java.awt.Color(204, 255, 255));

        lblNotePresentation.setText("Current Project Requires Presentation");

        cmbBoxPrjCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBoxPrjCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBoxPrjCategoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Project Category");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(cmbBoxPrjCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(lblNotePresentation, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbBoxPrjCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblNotePresentation)))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 730, 70));

        jPanel6.setBackground(new java.awt.Color(204, 255, 255));

        jLabel6.setText("Supervisor");

        cmbBoxSupervisor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBoxSupervisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBoxSupervisorActionPerformed(evt);
            }
        });

        jLabel8.setText("Second Marker");

        cmbBoxSecMarker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBoxSecMarker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBoxSecMarkerActionPerformed(evt);
            }
        });

        lblSuperSchool.setText("*note* Supervisor is not from preferred school");

        lblSecondSchool.setText("*note* SecondMarker is not from preferred school");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSuperSchool, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBoxSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSecondSchool, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbBoxSecMarker, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBoxSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBoxSecMarker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSecondSchool)
                    .addComponent(lblSuperSchool))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 322, -1, 110));

        jPanel9.setBackground(new java.awt.Color(204, 255, 255));

        jLabel4.setText("Project Title / Name");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProjectTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProjectTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 730, 70));

        jPanel10.setBackground(new java.awt.Color(204, 255, 255));

        jLabel5.setText("Due Date");

        spinnerDueDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1704081540000L), null, null, java.util.Calendar.DAY_OF_MONTH));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(427, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 730, 70));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        String projectCategory = (String) cmbBoxPrjCategory.getSelectedItem();
        String projectTitle = txtProjectTitle.getText();
        Date projectDueDate = (Date) spinnerDueDate.getValue();
        String studentIntake = (String) cmbBoxIntake.getSelectedItem();
        String studentId = txtStudentId.getText();
        String supervisorName = (String) cmbBoxSupervisor.getSelectedItem();
        String secondMarkerName = (String) cmbBoxSecMarker.getSelectedItem();
        String projectID = generateNewProjectID();
        String projectRequirePresentation = getProjectRequirePresentation(projectCategory);
        String supervisorID = getLecturerID(supervisorName);
        String secondMarkerID = getLecturerID(secondMarkerName);

        if (projectCategory == null || projectTitle.isEmpty() || projectDueDate == null
                || (rdBtnIntake.isSelected() && (studentIntake == null || studentIntake.isEmpty()))
                || (rdBtnIndividual.isSelected() && (studentId == null || studentId.isEmpty()))
                || supervisorName == null || supervisorName.isEmpty()
                || secondMarkerName == null || secondMarkerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean isStudentIntakeValid = studentIntake != null && !studentIntake.isEmpty();
        boolean isStudentIdValid = studentId != null && !studentId.isEmpty();

        if (isStudentIdValid) {
            if (!isValidStudentId(studentId)) {
                JOptionPane.showMessageDialog(this, "Invalid Student ID format", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!studentExists(studentId)) {
                JOptionPane.showMessageDialog(this, "Student ID does not exist", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (studentIntake == null || studentIntake.isEmpty()) {
                studentIntake = getIntakeByStudentId(studentId);
            }
            String projectDetails = formatProjectDetails(
                    projectID, projectCategory, projectTitle, projectDueDate,
                    projectRequirePresentation, studentIntake, studentId, supervisorID, secondMarkerID
            );
            writeProjectDetailsToFile(projectDetails);
        } else if (isStudentIntakeValid) {
            List<String> studentIDs = getStudentIDsByIntake(studentIntake);
            if (studentIDs.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No students found for the provided intake code", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            StringBuilder projectDetails = new StringBuilder();
            for (String id : studentIDs) {
                projectDetails.append(formatProjectDetails(
                        projectID, projectCategory, projectTitle, projectDueDate,
                        projectRequirePresentation, studentIntake, id, supervisorID, secondMarkerID
                ));
                projectDetails.append(System.lineSeparator());
            }
            writeProjectDetailsToFile(projectDetails.toString());
            rdBtnIntake.setSelected(false);
            rdBtnIndividual.setSelected(false);
            txtStudentId.setText("");
            cmbBoxIntake.setSelectedIndex(-1);
            cmbBoxPrjCategory.setSelectedIndex(-1);
            txtProjectTitle.setText("");
            spinnerDueDate.setValue(new Date());
            cmbBoxSupervisor.setSelectedIndex(-1);
            cmbBoxSecMarker.setSelectedIndex(-1);

        } else {
            JOptionPane.showMessageDialog(this, "Please provide either intake or student ID", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void rdBtnIntakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnIntakeActionPerformed
        if (rdBtnIntake.isSelected()) {
            txtStudentId.setVisible(false);
            cmbBoxIntake.setVisible(true);
            cmbBoxIntake.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_rdBtnIntakeActionPerformed

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        dispose();
        ProjectManagerDashboard obj = new ProjectManagerDashboard(pm);
        obj.setVisible(true);
    }//GEN-LAST:event_btnExitMouseClicked

    private void rdBtnIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnIndividualActionPerformed
        if (rdBtnIndividual.isSelected()) {
            cmbBoxIntake.setVisible(false);
            txtStudentId.setVisible(true);
            txtStudentId.setText("");
        }
    }//GEN-LAST:event_rdBtnIndividualActionPerformed

    private void cmbBoxPrjCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBoxPrjCategoryActionPerformed
        String selectedProjectCategory = (String) cmbBoxPrjCategory.getSelectedItem();
        boolean requiresPresentation = checkIfPresentationRequired(selectedProjectCategory);
        lblNotePresentation.setVisible(requiresPresentation);
    }//GEN-LAST:event_cmbBoxPrjCategoryActionPerformed

    private void cmbBoxSupervisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBoxSupervisorActionPerformed
//        String selectedProjectCategory = (String) cmbBoxPrjCategory.getSelectedItem();
//        String selectedSupervisor = (String) cmbBoxSupervisor.getSelectedItem();
//        boolean supervisorSchoolMismatch = checkSchoolMismatch(selectedProjectCategory, selectedSupervisor);
//        lblSuperSchool.setVisible(supervisorSchoolMismatch);
    }//GEN-LAST:event_cmbBoxSupervisorActionPerformed

    private void cmbBoxSecMarkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBoxSecMarkerActionPerformed
//        String selectedProjectCategory = (String) cmbBoxPrjCategory.getSelectedItem();
//        System.out.println(selectedProjectCategory);
//        String selectedSecondMarker = (String) cmbBoxSecMarker.getSelectedItem();
//        boolean markerSchoolMismatch = checkSchoolMismatch(selectedProjectCategory, selectedSecondMarker);
//        lblSecondSchool.setVisible(markerSchoolMismatch);
    }//GEN-LAST:event_cmbBoxSecMarkerActionPerformed

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        rdBtnIntake.setSelected(false);
        rdBtnIndividual.setSelected(false);
        txtStudentId.setText("");
        cmbBoxIntake.setSelectedIndex(-1);
        cmbBoxPrjCategory.setSelectedIndex(-1);
        txtProjectTitle.setText("");
        spinnerDueDate.setValue(new Date());
        cmbBoxSupervisor.setSelectedIndex(-1);
        cmbBoxSecMarker.setSelectedIndex(-1);
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void loadIntakeList() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/intakesType.txt"))) {
            String line;
            cmbBoxIntake.removeAllItems();
            while ((line = reader.readLine()) != null) {
                String[] intakeItems = line.split(";");
                if (intakeItems.length > 0) {
                    cmbBoxIntake.addItem(intakeItems[0]);
                }
            }
            cmbBoxIntake.setSelectedIndex(-1);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading school list: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadProjectCategoryList() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/ProjectType.txt"))) {
            String line;
            cmbBoxPrjCategory.removeAllItems();
            while ((line = reader.readLine()) != null) {
                String[] PrjCategoryItems = line.split(";");
                if (PrjCategoryItems.length > 0) {
                    cmbBoxPrjCategory.addItem(PrjCategoryItems[0]);
                }
            }
            cmbBoxPrjCategory.setSelectedIndex(-1);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading school list: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSupervisorList() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Lecturer.txt"))) {
            String line;
            cmbBoxSupervisor.removeAllItems();
            while ((line = reader.readLine()) != null) {
                String[] SupevisorItems = line.split(";");
                if (SupevisorItems.length > 0) {
                    cmbBoxSupervisor.addItem(SupevisorItems[1]);
                }
            }
            cmbBoxSupervisor.setSelectedIndex(-1);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading school list: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSecondMarkerList() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Lecturer.txt"))) {
            String line;
            cmbBoxSecMarker.removeAllItems();
            while ((line = reader.readLine()) != null) {
                String[] SecondItems = line.split(";");
                if (SecondItems.length > 0) {
                    cmbBoxSecMarker.addItem(SecondItems[1]);
                }
            }
            cmbBoxSecMarker.setSelectedIndex(-1);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading school list: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean checkIfPresentationRequired(String projectCategory) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/ProjectType.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] projectTypeItems = line.split(";");
                if (projectTypeItems.length >= 3 && projectTypeItems[0].equals(projectCategory)) {
                    return projectTypeItems[2].trim().equalsIgnoreCase("Yes");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error checking if presentation is required: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    private String getIntakeByStudentId(String studentId) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Students.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] studentDetails = line.split(";");
                if (studentDetails.length == 7 && studentDetails[0].equals(studentId)) {
                    return studentDetails[6]; // Return the intake code
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private boolean isValidStudentId(String studentId) {
        return studentId.matches("ST\\d{6}");
    }

    private boolean studentExists(String studentId) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Students.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] studentDetails = line.split(";");
                if (studentDetails.length == 7 && studentDetails[0].equals(studentId)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void writeProjectDetailsToFile(String projectDetails) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("src/textfiles/Projects.txt", true))) {
            writer.print(projectDetails);
            JOptionPane.showMessageDialog(this, "Data written to file successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String generateNewProjectID() {
        String lastProjectID = "PRJ00000";
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Projects.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    String[] parts = line.split(",");
                    if (parts.length > 0) {
                        lastProjectID = parts[0];
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String prefix = "PRJ";
        int newIDNumber = 1;

        if (lastProjectID.startsWith(prefix) && lastProjectID.length() > 3) {
            try {
                newIDNumber = Integer.parseInt(lastProjectID.substring(3)) + 1;
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        return String.format("%s%05d", prefix, newIDNumber);
    }

    private List<String> getStudentIDsByIntake(String intakeCode) {
        List<String> studentIDs = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Students.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] studentDetails = line.split(";");
                if (studentDetails[6].equals(intakeCode)) {
                    studentIDs.add(studentDetails[0]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return studentIDs;
    }

    private String getProjectRequirePresentation(String category) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/ProjectType.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] projectTypeDetails = line.split(";");
                if (projectTypeDetails[0].equals(category)) {
                    return projectTypeDetails[2];
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "No";
    }

    private String getLecturerID(String lecturerName) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Lecturer.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] lecturerDetails = line.split(";");
                if (lecturerDetails[1].equals(lecturerName)) {
                    return lecturerDetails[0];
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "";
    }

    private String formatProjectDetails(String projectID, String projectCategory, String projectTitle, Date dueDate, String requirePresentation, String studentIntake, String studentID, String supervisorID, String secondMarkerID) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return String.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,Pending",
                projectID, projectCategory, projectTitle, sdf.format(dueDate),
                requirePresentation, studentIntake, studentID, supervisorID, secondMarkerID);
    }

//    private boolean checkSchoolMismatch(String projectCategory, String marker) {
//        String markerSchool = "";
//
//        try (BufferedReader reader = new BufferedReader(new FileReader("src/textfiles/Lecturer.txt"))) {
//            String line;
//            while ((line = reader.readLine()) != null) {
//                String[] lecturerItems = line.split(";");
//                if (lecturerItems.length >= 7 && lecturerItems[1].equalsIgnoreCase(marker)) {
//                    markerSchool = lecturerItems[6].trim();
//                    break; // Found the marker, exit the loop
//                }
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Error checking school mismatch: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }
//
//        // Check if the marker's school matches the project category
//        if (!markerSchool.equalsIgnoreCase(projectCategory)) {
//            return true; // Schools don't match, return true
//        } else {
//            return false; // Schools match, return false
//        }
//    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbBoxIntake;
    private javax.swing.JComboBox<String> cmbBoxPrjCategory;
    private javax.swing.JComboBox<String> cmbBoxSecMarker;
    private javax.swing.JComboBox<String> cmbBoxSupervisor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lblNotePresentation;
    private javax.swing.JLabel lblSecondSchool;
    private javax.swing.JLabel lblSuperSchool;
    private javax.swing.JRadioButton rdBtnIndividual;
    private javax.swing.JRadioButton rdBtnIntake;
    private javax.swing.JSpinner spinnerDueDate;
    private javax.swing.JTextField txtProjectTitle;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables
}
